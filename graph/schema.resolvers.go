package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/AssassinRobot/author/graph/model"
)

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: CreateAuthor - createAuthor"))
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: CreateBook - createBook"))
}

// CreateLanguage is the resolver for the createLanguage field.
func (r *mutationResolver) CreateLanguage(ctx context.Context, input model.NewLanguage) (*model.Language, error) {
	panic(fmt.Errorf("not implemented: CreateLanguage - createLanguage"))
}

// CreateNewGenre is the resolver for the createNewGenre field.
func (r *mutationResolver) CreateNewGenre(ctx context.Context, input model.NewGenre) (*model.Genre, error) {
	panic(fmt.Errorf("not implemented: CreateNewGenre - createNewGenre"))
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, input model.UpdateAuthor) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: UpdateAuthor - updateAuthor"))
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, input model.UpdateBook) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: UpdateBook - updateBook"))
}

// UpdateLanguage is the resolver for the updateLanguage field.
func (r *mutationResolver) UpdateLanguage(ctx context.Context, input model.UpdateLanguage) (*model.Language, error) {
	panic(fmt.Errorf("not implemented: UpdateLanguage - updateLanguage"))
}

// UpdateGenre is the resolver for the updateGenre field.
func (r *mutationResolver) UpdateGenre(ctx context.Context, input model.UpdateGenre) (*model.Genre, error) {
	panic(fmt.Errorf("not implemented: UpdateGenre - updateGenre"))
}

// DeleteAuthorByID is the resolver for the deleteAuthorByID field.
func (r *mutationResolver) DeleteAuthorByID(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteAuthorByID - deleteAuthorByID"))
}

// DeleteBookByID is the resolver for the deleteBookByID field.
func (r *mutationResolver) DeleteBookByID(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteBookByID - deleteBookByID"))
}

// DeleteLanguageByID is the resolver for the deleteLanguageByID field.
func (r *mutationResolver) DeleteLanguageByID(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteLanguageByID - deleteLanguageByID"))
}

// DeleteGenreByID is the resolver for the deleteGenreByID field.
func (r *mutationResolver) DeleteGenreByID(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteGenreByID - deleteGenreByID"))
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	panic(fmt.Errorf("not implemented: Authors - authors"))
}

// Genres is the resolver for the genres field.
func (r *queryResolver) Genres(ctx context.Context) ([]*model.Genre, error) {
	panic(fmt.Errorf("not implemented: Genres - genres"))
}

// Languages is the resolver for the languages field.
func (r *queryResolver) Languages(ctx context.Context) ([]*model.Language, error) {
	panic(fmt.Errorf("not implemented: Languages - languages"))
}

// GetBookByID is the resolver for the getBookByID field.
func (r *queryResolver) GetBookByID(ctx context.Context, id string) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: GetBookByID - getBookByID"))
}

// GetBooksByName is the resolver for the getBooksByName field.
func (r *queryResolver) GetBooksByName(ctx context.Context, name string) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: GetBooksByName - getBooksByName"))
}

// GetBooksByLanguageID is the resolver for the getBooksByLanguageID field.
func (r *queryResolver) GetBooksByLanguageID(ctx context.Context, languageID string) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: GetBooksByLanguageID - getBooksByLanguageID"))
}

// GetBooksByGenreID is the resolver for the getBooksByGenreID field.
func (r *queryResolver) GetBooksByGenreID(ctx context.Context, genreID string) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: GetBooksByGenreID - getBooksByGenreID"))
}

// GetBooksByAuthorID is the resolver for the getBooksByAuthorID field.
func (r *queryResolver) GetBooksByAuthorID(ctx context.Context, authorID string) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: GetBooksByAuthorID - getBooksByAuthorID"))
}

// GetBooksByPublicationDate is the resolver for the getBooksByPublicationDate field.
func (r *queryResolver) GetBooksByPublicationDate(ctx context.Context, publicationDate int32) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: GetBooksByPublicationDate - getBooksByPublicationDate"))
}

// GetAuthorByID is the resolver for the getAuthorByID field.
func (r *queryResolver) GetAuthorByID(ctx context.Context, id string) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: GetAuthorByID - getAuthorByID"))
}

// GetAuthorsByName is the resolver for the getAuthorsByName field.
func (r *queryResolver) GetAuthorsByName(ctx context.Context, name string) ([]*model.Author, error) {
	panic(fmt.Errorf("not implemented: GetAuthorsByName - getAuthorsByName"))
}

// GetAuthorsByBookID is the resolver for the getAuthorsByBookID field.
func (r *queryResolver) GetAuthorsByBookID(ctx context.Context, bookID string) (*model.Author, error) {
	panic(fmt.Errorf("not implemented: GetAuthorsByBookID - getAuthorsByBookID"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
